
import { NextRequest } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { cookies } from 'next/headers';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

// Fun√ß√£o para buscar dados do sistema
async function analisarDadosDoSistema(userId: number, userName: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:5000';
    
    // Buscar leads
    const leadsResponse = await fetch(`${baseUrl}/api/leads`, {
      headers: {
        'Cookie': `user=${JSON.stringify({ id: userId })}`
      }
    });
    const leadsData = leadsResponse.ok ? await leadsResponse.json() : [];
    const leads = Array.isArray(leadsData) ? leadsData : [];

    // Buscar parceiros
    const parceirosResponse = await fetch(`${baseUrl}/api/sankhya/parceiros?page=1&pageSize=50`);
    const parceirosData = parceirosResponse.ok ? await parceirosResponse.json() : { parceiros: [] };
    const parceiros = Array.isArray(parceirosData.parceiros) ? parceirosData.parceiros : [];

    // Buscar produtos com estoque
    console.log('üîç Buscando produtos da API...');
    const produtosResponse = await fetch(`${baseUrl}/api/sankhya/produtos?page=1&pageSize=100`);
    const produtosData = produtosResponse.ok ? await produtosResponse.json() : { produtos: [] };
    console.log('üì¶ Dados recebidos da API produtos:', JSON.stringify(produtosData, null, 2));
    const produtos = Array.isArray(produtosData.produtos) ? produtosData.produtos : [];
    console.log(`‚úÖ Total de produtos encontrados: ${produtos.length}`);

    // Buscar pedidos
    const pedidosResponse = await fetch(`${baseUrl}/api/sankhya/pedidos/listar?userId=${userId}`);
    const pedidosData = pedidosResponse.ok ? await pedidosResponse.json() : [];
    const pedidos = Array.isArray(pedidosData) ? pedidosData : [];

    // Buscar atividades
    const atividadesResponse = await fetch(`${baseUrl}/api/leads/atividades`);
    const atividadesData = atividadesResponse.ok ? await atividadesResponse.json() : [];
    const atividades = Array.isArray(atividadesData) ? atividadesData : [];

    return {
      userName,
      leads: leads.slice(0, 20), // Limitar para n√£o sobrecarregar
      parceiros: parceiros.slice(0, 20),
      produtos: produtos.slice(0, 20),
      pedidos: pedidos.slice(0, 20),
      atividades: atividades.slice(0, 20),
      totalLeads: leads.length,
      totalParceiros: parceirosData.total || parceiros.length,
      totalProdutos: produtosData.total || produtos.length,
      totalPedidos: pedidos.length,
      totalAtividades: atividades.length
    };
  } catch (error) {
    console.error('Erro ao analisar dados:', error);
    return null;
  }
}

const SYSTEM_PROMPT = `Voc√™ √© um Assistente de Vendas Inteligente integrado em uma ferramenta de CRM/For√ßa de Vendas chamada Sankhya CRM.

SEU PAPEL E RESPONSABILIDADES:
- Ajudar vendedores a identificar oportunidades de vendas
- Sugerir a√ß√µes estrat√©gicas para fechar neg√≥cios
- Analisar leads e recomendar pr√≥ximos passos
- Identificar clientes potenciais com maior chance de convers√£o
- Sugerir produtos que podem interessar aos clientes
- Alertar sobre leads em risco ou oportunidades urgentes

DADOS QUE VOC√ä TEM ACESSO:
- Leads: oportunidades de vendas com informa√ß√µes sobre valor, est√°gio, parceiro associado
- Parceiros: clientes e prospects cadastrados no sistema
- Produtos: cat√°logo REAL de produtos com estoque atual (USE APENAS OS PRODUTOS FORNECIDOS NO CONTEXTO)
- Atividades: hist√≥rico de intera√ß√µes com leads

‚ö†Ô∏è REGRA IMPORTANTE SOBRE PRODUTOS:
Voc√™ receber√° uma lista completa de produtos com suas quantidades em estoque.
NUNCA mencione produtos que n√£o estejam explicitamente listados nos dados fornecidos.
Se n√£o houver produtos na lista, informe que n√£o h√° produtos cadastrados no momento.

COMO VOC√ä DEVE AGIR:
1. Sempre analise os dados fornecidos antes de responder
2. Seja proativo em sugerir vendas e a√ß√µes comerciais
3. Identifique padr√µes e oportunidades nos dados
4. Use m√©tricas e n√∫meros concretos em suas an√°lises
5. Seja direto e focado em resultados de vendas
6. Priorize leads com maior valor e urg√™ncia
7. Sugira pr√≥ximos passos claros e acion√°veis

FORMATO DAS RESPOSTAS:
- Use emojis para destacar informa√ß√µes importantes (üìä üí∞ üéØ ‚ö†Ô∏è ‚úÖ)
- Organize informa√ß√µes em listas quando relevante
- Destaque valores monet√°rios e datas importantes
- Seja conciso mas informativo

Sempre que o usu√°rio fizer uma pergunta, considere os dados do sistema dispon√≠veis para dar respostas contextualizadas e acion√°veis.`;

export async function POST(request: NextRequest) {
  try {
    const { message, history } = await request.json();

    // Obter usu√°rio autenticado
    const cookieStore = await cookies();
    const userCookie = cookieStore.get('user');
    let userId = 0;
    let userName = 'Usu√°rio';
    
    if (userCookie) {
      try {
        const user = JSON.parse(userCookie.value);
        userId = user.id;
        userName = user.name || 'Usu√°rio';
      } catch (e) {
        console.error('Erro ao parsear cookie:', e);
      }
    }

    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

    // Montar hist√≥rico com prompt de sistema
    const chatHistory = [
      {
        role: 'user',
        parts: [{ text: SYSTEM_PROMPT }],
      },
      {
        role: 'model',
        parts: [{ text: 'Entendido! Sou seu Assistente de Vendas no Sankhya CRM. Estou pronto para analisar seus dados e ajudar voc√™ a vender mais. Como posso ajudar?' }],
      },
      ...history.map((msg: any) => ({
        role: msg.role === 'assistant' ? 'model' : 'user',
        parts: [{ text: msg.content }],
      }))
    ];

    // Adicionar contexto de dados APENAS no primeiro prompt do usu√°rio
    let messageWithContext = message;
    if (history.length === 0) {
      console.log('üîç Primeiro prompt detectado - Buscando dados do sistema...');
      const dadosSistema = await analisarDadosDoSistema(userId, userName);
      
      if (dadosSistema) {
        messageWithContext = `DADOS DO SISTEMA (para contexto da sua an√°lise):

üë§ USU√ÅRIO LOGADO: ${dadosSistema.userName}

üìä RESUMO GERAL:
- Total de Leads Ativos: ${dadosSistema.totalLeads}
- Total de Parceiros/Clientes: ${dadosSistema.totalParceiros}
- Total de Produtos: ${dadosSistema.totalProdutos}
- Total de Pedidos: ${dadosSistema.totalPedidos}
- Total de Atividades: ${dadosSistema.totalAtividades}

üí∞ LEADS (${dadosSistema.leads.length} mais recentes):
${dadosSistema.leads.map((l: any) => `- ${l.NOME} | Valor: R$ ${l.VALOR?.toLocaleString('pt-BR') || 0} | Est√°gio: ${l.CODESTAGIO || 'N/A'} | Status: ${l.STATUS_LEAD || 'EM_ANDAMENTO'}`).join('\n')}

üë• PARCEIROS/CLIENTES (${dadosSistema.parceiros.length} primeiros):
${dadosSistema.parceiros.map((p: any) => `- ${p.NOMEPARC} | CPF/CNPJ: ${p.CGC_CPF || 'N/A'} | Cidade: ${p.NOMECID || 'N/A'}`).join('\n')}

üì¶ PRODUTOS DISPON√çVEIS (${dadosSistema.produtos.length} produtos cadastrados):
${dadosSistema.produtos.map((p: any) => {
  const estoque = parseFloat(p.ESTOQUE || '0');
  const statusEstoque = estoque > 0 ? '‚úÖ' : '‚ö†Ô∏è';
  return `- ${p.DESCRPROD} | Estoque: ${estoque.toLocaleString('pt-BR', { minimumFractionDigits: 2 })} unidades ${statusEstoque}`;
}).join('\n')}

IMPORTANTE: Use APENAS os produtos listados acima. N√£o invente ou mencione produtos que n√£o est√£o nesta lista.

üõí PEDIDOS (${dadosSistema.pedidos.length} mais recentes):
${dadosSistema.pedidos.map((ped: any) => `- Pedido #${ped.NUNOTA} | Cliente: ${ped.NOMEPARC} | Valor: R$ ${ped.VLRNOTA?.toLocaleString('pt-BR') || 0} | Data: ${ped.DTNEG || 'N/A'}`).join('\n')}

üìÖ ATIVIDADES (${dadosSistema.atividades.length} mais recentes):
${dadosSistema.atividades.map((a: any) => `- ${a.TIPO}: ${a.DESCRICAO?.split('|')[0] || a.DESCRICAO} | Status: ${a.STATUS || 'AGUARDANDO'} | Data: ${a.DATA_INICIO ? new Date(a.DATA_INICIO).toLocaleDateString('pt-BR') : 'N/A'}`).join('\n')}

PERGUNTA DO USU√ÅRIO:
${message}`;
        console.log('‚úÖ Dados do sistema carregados e anexados ao primeiro prompt');
      }
    } else {
      console.log('üí¨ Prompt subsequente - Usando dados j√° carregados no hist√≥rico');
    }

    const chat = model.startChat({
      history: chatHistory,
      generationConfig: {
        maxOutputTokens: 2000,
      },
    });

    // Usar streaming com contexto
    const result = await chat.sendMessageStream(messageWithContext);

    const encoder = new TextEncoder();
    const stream = new ReadableStream({
      async start(controller) {
        try {
          for await (const chunk of result.stream) {
            const text = chunk.text();
            const data = `data: ${JSON.stringify({ text })}\n\n`;
            controller.enqueue(encoder.encode(data));
          }
          controller.enqueue(encoder.encode('data: [DONE]\n\n'));
          controller.close();
        } catch (error) {
          controller.error(error);
        }
      },
    });

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });
  } catch (error) {
    console.error('Erro no chat Gemini:', error);
    return new Response(JSON.stringify({ error: 'Erro ao processar mensagem' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}
